{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import plugin from \"tailwindcss/plugin\";\nimport fs from \"fs\";\nimport { glob } from \"glob\";\nimport util from \"util\";\n\ninterface RecastComponent {\n  base?: string | string[] | Record<string, string | string[]>;\n  variants?: Record<\n    string,\n    Record<string, string | string[] | Record<string, string | string[]>>\n  >;\n}\n\ninterface RecastUsage {\n  componentName: string;\n  props: Record<string, any>;\n}\n\nfunction debugLog(label: string, data: any) {\n  console.log(\n    `DEBUG - ${label}:`,\n    util.inspect(data, { depth: null, colors: true })\n  );\n}\n\nexport default plugin(function ({ addBase, config }) {\n  console.log(\"Plugin version: 1.0.1\");\n  debugLog(\"Plugin called with config\", config);\n\n  const safelist = new Set<string>();\n  const components: Record<string, any> = {};\n  const usages: any[] = [];\n\n  const contentConfig = config(\"content\");\n  debugLog(\"Content config\", contentConfig);\n\n  try {\n    if (\n      Array.isArray(contentConfig) &&\n      contentConfig.length > 0 &&\n      typeof contentConfig[0] === \"object\" &&\n      contentConfig[0].raw\n    ) {\n      // Test environment: content is passed directly\n      debugLog(\"Processing direct content\", contentConfig[0].raw);\n      const parsedComponents = parseRecastComponents(contentConfig[0].raw);\n      debugLog(\"Parsed components\", parsedComponents);\n      Object.assign(components, parsedComponents);\n      const parsedUsages = parseRecastUsages(contentConfig[0].raw);\n      debugLog(\"Parsed usages\", parsedUsages);\n      usages.push(...parsedUsages);\n    } else {\n      // Real-world scenario: process file patterns\n      const filePatterns = getFilePatterns(contentConfig);\n      debugLog(\"File patterns\", filePatterns);\n\n      filePatterns.forEach((pattern) => {\n        debugLog(\"Processing pattern\", pattern);\n        const files = glob.sync(pattern);\n        debugLog(\"Found files\", files);\n        files.forEach((file) => {\n          debugLog(\"Processing file\", file);\n          const content = fs.readFileSync(file, \"utf8\");\n          debugLog(\"File content\", content);\n          const parsedComponents = parseRecastComponents(content);\n          debugLog(\"Parsed components\", parsedComponents);\n          Object.assign(components, parsedComponents);\n          const parsedUsages = parseRecastUsages(content);\n          debugLog(\"Parsed usages\", parsedUsages);\n          usages.push(...parsedUsages);\n        });\n      });\n    }\n  } catch (error) {\n    console.error(\"Error processing content:\", error);\n  }\n\n  debugLog(\"All components\", components);\n  debugLog(\"All usages\", usages);\n\n  usages.forEach((usage) => {\n    debugLog(\"Processing usage\", usage);\n    const component = components[usage.componentName];\n    if (!component) {\n      debugLog(\"Component not found\", usage.componentName);\n      return;\n    }\n\n    Object.entries(usage.props).forEach(([propName, propValue]) => {\n      debugLog(\"Processing prop\", { propName, propValue });\n      const variantGroup = component.variants?.[propName];\n      if (!variantGroup) {\n        debugLog(\"Variant group not found\", propName);\n        return;\n      }\n\n      if (typeof propValue === \"object\" && propValue !== null) {\n        Object.entries(propValue).forEach(([breakpoint, value]) => {\n          debugLog(\"Processing breakpoint\", { breakpoint, value });\n          if (breakpoint !== \"default\" && typeof value === \"string\") {\n            const classes = variantGroup[value];\n            if (classes) {\n              debugLog(\"Adding to safelist\", { classes, breakpoint });\n              addToSafelist(safelist, classes, breakpoint);\n            } else {\n              debugLog(\"Classes not found for variant\", { propName, value });\n            }\n          }\n        });\n      } else {\n        debugLog(\"Prop value is not an object\", propValue);\n      }\n    });\n  });\n\n  const finalSafelist = Array.from(safelist).sort();\n  debugLog(\"Final safelist\", finalSafelist);\n\n  config().safelist = finalSafelist;\n});\n\nfunction parseRecastComponents(content: string): Record<string, any> {\n  debugLog(\"Parsing Recast components from content\", content);\n  const componentRegex =\n    /export\\s+const\\s+(\\w+)\\s*=\\s*recast\\s*\\(\\s*\\w+\\s*,\\s*({[\\s\\S]*?})\\s*\\)/g;\n  const components: Record<string, any> = {};\n  let match;\n  while ((match = componentRegex.exec(content)) !== null) {\n    const [, componentName, componentDef] = match;\n    try {\n      const processedDef = componentDef\n        .replace(/(['\"])?([a-zA-Z0-9_]+)(['\"])?:/g, '\"$2\": ')\n        .replace(/'/g, '\"')\n        .replace(/,\\s*}/g, \"}\");\n      const componentObj = JSON.parse(processedDef);\n      components[componentName] = componentObj;\n    } catch (e) {\n      console.error(`Error parsing component ${componentName}:`, e);\n    }\n  }\n  debugLog(\"Parsed Recast components\", components);\n  return components;\n}\n\nfunction parseRecastUsages(content: string): any[] {\n  debugLog(\"Parsing Recast usages from content\", content);\n  const usageRegex = /<(\\w+)([^>]+)>/g;\n  const usages: any[] = [];\n  let match;\n  while ((match = usageRegex.exec(content)) !== null) {\n    const [, componentName, propsString] = match;\n    const props = parseProps(propsString);\n    usages.push({ componentName, props });\n  }\n  debugLog(\"Parsed Recast usages\", usages);\n  return usages;\n}\n\nfunction parseProps(propsString: string): Record<string, any> {\n  debugLog(\"Parsing props from string\", propsString);\n  const props: Record<string, any> = {};\n  const propsRegex = /(\\w+)\\s*=\\s*({[^}]+}|\"[^\"]*\"|{`[^`]+`}|\\w+)/g;\n  let match;\n  while ((match = propsRegex.exec(propsString)) !== null) {\n    const [, key, value] = match;\n    if (key === \"ref\" || key === \"className\" || key === \"style\") {\n      continue; // Skip non-variant props\n    }\n    if (value.startsWith(\"{\") && value.endsWith(\"}\")) {\n      if (value.startsWith(\"{`\") && value.endsWith(\"`}\")) {\n        props[key] = value.slice(2, -2);\n      } else {\n        try {\n          const processedValue = value\n            .replace(/'/g, '\"')\n            .replace(/(\\w+):/g, '\"$1\":')\n            .replace(/\\s+/g, \"\")\n            .replace(/{{/g, \"{\")\n            .replace(/}}/g, \"}\");\n          props[key] = JSON.parse(processedValue);\n        } catch (e) {\n          console.error(`Error parsing prop ${key}:`, e);\n          props[key] = value;\n        }\n      }\n    } else if (value.startsWith('\"') && value.endsWith('\"')) {\n      props[key] = value.slice(1, -1);\n    } else {\n      props[key] = value;\n    }\n  }\n  debugLog(\"Parsed props\", props);\n  return props;\n}\n\nfunction getFilePatterns(contentConfig: any): string[] {\n  debugLog(\"Getting file patterns from content config\", contentConfig);\n  if (typeof contentConfig === \"string\") {\n    return [contentConfig];\n  } else if (Array.isArray(contentConfig)) {\n    return contentConfig.flatMap(getFilePatterns);\n  } else if (typeof contentConfig === \"object\" && contentConfig !== null) {\n    return getFilePatterns(contentConfig.files || []);\n  }\n  return [];\n}\n\nfunction addToSafelist(\n  safelist: Set<string>,\n  classes: string | string[] | Record<string, string | string[]>,\n  prefix: string = \"\"\n) {\n  debugLog(\"addToSafelist called with\", { classes, prefix });\n  if (!prefix) return;\n\n  if (typeof classes === \"string\") {\n    classes.split(/\\s+/).forEach((cls) => {\n      safelist.add(`${prefix}:${cls}`);\n    });\n  } else if (Array.isArray(classes)) {\n    classes.forEach((cls) => {\n      safelist.add(`${prefix}:${cls}`);\n    });\n  } else if (typeof classes === \"object\" && classes !== null) {\n    Object.entries(classes).forEach(([breakpoint, breakpointClasses]) => {\n      if (breakpoint !== \"default\") {\n        addToSafelist(safelist, breakpointClasses, breakpoint);\n      }\n    });\n  }\n}\n"],"mappings":"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","names":[]}