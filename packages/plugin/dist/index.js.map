{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import plugin from \"tailwindcss/plugin\";\nimport fs from \"fs\";\nimport { glob } from \"glob\";\nimport util from \"util\";\n\n/**\n * Logs debug information with formatted output.\n * @param {string} label - The label for the debug information.\n * @param {any} data - The data to be logged.\n */\nfunction debugLog(label: string, data: any) {\n  console.log(\n    `DEBUG - ${label}:`,\n    util.inspect(data, { depth: null, colors: true })\n  );\n}\n\ninterface RecastComponent {\n  base?: string | string[] | Record<string, string | string[]>;\n  variants?: Record<\n    string,\n    Record<string, string | string[] | Record<string, string | string[]>>\n  >;\n}\n\ninterface RecastUsage {\n  componentName: string;\n  props: Record<string, any>;\n}\n\n/**\n * Parses Recast component definitions from the given content.\n * @param {string} content - The content to parse for Recast components.\n * @returns {Record<string, RecastComponent>} An object containing parsed Recast components.\n */\nfunction parseRecastComponents(\n  content: string\n): Record<string, RecastComponent> {\n  const componentRegex =\n    /export\\s+const\\s+(\\w+)\\s*=\\s*recast\\s*\\(\\s*\\w+\\s*,\\s*({[\\s\\S]*?})\\s*\\)/g;\n  const components: Record<string, RecastComponent> = {};\n  let match;\n  while ((match = componentRegex.exec(content)) !== null) {\n    const [, componentName, componentDef] = match;\n    try {\n      const processedDef = componentDef\n        .replace(/(['\"])?([a-zA-Z0-9_]+)(['\"])?:/g, '\"$2\": ')\n        .replace(/'/g, '\"')\n        .replace(/,\\s*}/g, \"}\")\n        .replace(/\\n/g, \" \")\n        .replace(/\\s+/g, \" \");\n      const componentObj = JSON.parse(processedDef);\n      components[componentName] = componentObj;\n    } catch (e) {\n      console.error(`Error parsing component ${componentName}:`, e);\n    }\n  }\n  return components;\n}\n\n/**\n * Parses Recast component usages from the given content.\n * @param {string} content - The content to parse for Recast usages.\n * @returns {RecastUsage[]} An array of parsed Recast usages.\n */\nfunction parseRecastUsages(content: string): RecastUsage[] {\n  const usageRegex = /<(\\w+)([^>]+)>/g;\n  const usages: RecastUsage[] = [];\n  let match;\n  while ((match = usageRegex.exec(content)) !== null) {\n    const [, componentName, propsString] = match;\n    const props = parseProps(propsString);\n    usages.push({ componentName, props });\n  }\n  return usages;\n}\n\n/**\n * Parses props from a string representation.\n * @param {string} propsString - The string containing props to parse.\n * @returns {Record<string, any>} An object containing parsed props.\n */\nfunction parseProps(propsString: string): Record<string, any> {\n  const props: Record<string, any> = {};\n  const propsRegex = /(\\w+)\\s*=\\s*({[^}]+}|\"[^\"]*\"|{`[^`]+`}|\\w+)/g;\n  let match;\n  while ((match = propsRegex.exec(propsString)) !== null) {\n    const [, key, value] = match;\n    if (key === \"ref\" || key === \"className\" || key === \"style\") {\n      continue; // Skip non-variant props\n    }\n    if (value.startsWith(\"{\") && value.endsWith(\"}\")) {\n      try {\n        const processedValue = value\n          .replace(/'/g, '\"')\n          .replace(/(\\w+):/g, '\"$1\":')\n          .replace(/\\s+/g, \"\")\n          .replace(/{{/g, \"{\")\n          .replace(/}}/g, \"}\");\n        props[key] = JSON.parse(processedValue);\n      } catch (e) {\n        console.error(`Error parsing prop ${key}:`, e);\n        props[key] = value;\n      }\n    } else if (value.startsWith('\"') && value.endsWith('\"')) {\n      props[key] = value.slice(1, -1);\n    } else {\n      props[key] = value;\n    }\n  }\n  return props;\n}\n\n/**\n * Extracts file patterns from the content configuration.\n * @param {any} contentConfig - The content configuration object.\n * @returns {string[]} An array of file patterns.\n */\nfunction getFilePatterns(contentConfig: any): string[] {\n  if (typeof contentConfig === \"string\") {\n    return [contentConfig];\n  } else if (Array.isArray(contentConfig)) {\n    return contentConfig.flatMap(getFilePatterns);\n  } else if (typeof contentConfig === \"object\" && contentConfig !== null) {\n    return getFilePatterns(contentConfig.files || []);\n  }\n  return [];\n}\n\n/**\n * Adds classes to the safelist with the given prefix.\n * @param {Set<string>} safelist - The set to add safelist items to.\n * @param {string | string[] | Record<string, string | string[]>} classes - The classes to add.\n * @param {string} prefix - The prefix to apply to the classes.\n */\nfunction addToSafelist(\n  safelist: Set<string>,\n  classes: string | string[] | Record<string, string | string[]>,\n  prefix: string = \"\"\n) {\n  if (!prefix) return;\n\n  if (typeof classes === \"string\") {\n    classes.split(/\\s+/).forEach((cls) => {\n      safelist.add(`${prefix}:${cls}`);\n    });\n  } else if (Array.isArray(classes)) {\n    classes.forEach((cls) => {\n      safelist.add(`${prefix}:${cls}`);\n    });\n  } else if (typeof classes === \"object\" && classes !== null) {\n    Object.entries(classes).forEach(([breakpoint, breakpointClasses]) => {\n      if (breakpoint !== \"default\") {\n        addToSafelist(safelist, breakpointClasses, breakpoint);\n      }\n    });\n  }\n}\n\nexport default plugin(function ({ addBase, config }) {\n  console.log(\"Plugin version: 1.0.3\");\n\n  const safelist = new Set<string>();\n  const components: Record<string, RecastComponent> = {};\n  const usages: RecastUsage[] = [];\n\n  const contentConfig = config(\"content\");\n\n  try {\n    if (\n      typeof contentConfig === \"object\" &&\n      contentConfig !== null &&\n      \"files\" in contentConfig &&\n      Array.isArray(contentConfig.files) &&\n      contentConfig.files.length > 0 &&\n      typeof contentConfig.files[0] === \"object\" &&\n      contentConfig.files[0].raw\n    ) {\n      // Test environment: content is passed directly\n      Object.assign(\n        components,\n        parseRecastComponents(contentConfig.files[0].raw)\n      );\n      usages.push(...parseRecastUsages(contentConfig.files[0].raw));\n    } else {\n      // Real-world scenario: process file patterns\n      const filePatterns = getFilePatterns(contentConfig);\n\n      filePatterns.forEach((pattern) => {\n        const files = glob.sync(pattern);\n        files.forEach((file) => {\n          const content = fs.readFileSync(file, \"utf8\");\n          Object.assign(components, parseRecastComponents(content));\n          usages.push(...parseRecastUsages(content));\n        });\n      });\n    }\n  } catch (error) {\n    console.error(\"Error processing content:\", error);\n  }\n\n  usages.forEach((usage) => {\n    const component = components[usage.componentName];\n    if (!component) return;\n\n    Object.entries(usage.props).forEach(([propName, propValue]) => {\n      const variantGroup = component.variants?.[propName];\n      if (!variantGroup) return;\n\n      if (typeof propValue === \"object\" && propValue !== null) {\n        Object.entries(propValue).forEach(([breakpoint, value]) => {\n          if (breakpoint !== \"default\" && typeof value === \"string\") {\n            const classes = variantGroup[value];\n            if (classes) {\n              addToSafelist(safelist, classes, breakpoint);\n            }\n          }\n        });\n      }\n    });\n  });\n\n  const finalSafelist = Array.from(safelist).sort();\n  debugLog(\"Final safelist\", finalSafelist);\n\n  config().safelist = finalSafelist;\n});\n"],"mappings":"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","names":[]}