{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import plugin from \"tailwindcss/plugin\";\nimport fs from \"fs\";\nimport { glob } from \"glob\";\n\n/**\n * Represents the structure of a Recast component.\n * @interface RecastComponent\n */\ninterface RecastComponent {\n  /** Base classes for the component */\n  base: string[];\n  /** Variant classes for the component */\n  variants: Record<string, Record<string, string | string[]>>;\n  /** Breakpoint classes for the component */\n  breakpoints: string[];\n}\n\n/**\n * Represents the possible types for Tailwind's content configuration.\n * @typedef {string | string[] | { files: string | string[] } | ContentConfig[]} ContentConfig\n */\ntype ContentConfig =\n  | string\n  | string[]\n  | { files: string | string[] }\n  | ContentConfig[];\n\n/**\n * Parses Recast component definitions from a file's content.\n * @param {string} content - The content of the file to parse.\n * @returns {RecastComponent[]} An array of parsed Recast components.\n */\nfunction parseRecastComponents(content: string): RecastComponent[] {\n  const regex = /recast\\(\\w+,\\s*({[\\s\\S]*?})\\)/g;\n  const components: RecastComponent[] = [];\n\n  let match: RegExpExecArray | null;\n\n  while ((match = regex.exec(content)) !== null) {\n    const componentDef = match[1];\n\n    // Convert componentDef string to an object (potentially unsafe, consider alternatives)\n    const componentObj = Function(`return ${componentDef}`)();\n\n    components.push({\n      base: componentObj.base || [],\n      variants: componentObj.variants || {},\n      breakpoints: componentObj.breakpoints || [],\n    });\n  }\n\n  return components;\n}\n\n/**\n * Adds a unique item to an array.\n * @param {string[]} arr - The array to add the item to.\n * @param {string} item - The item to add.\n */\nfunction addUnique(arr: string[], item: string) {\n  if (!arr.includes(item)) {\n    arr.push(item);\n  }\n}\n\n/**\n * Adds classes to the safelist, handling both string and array inputs.\n * Splits string inputs into individual classes and respects existing responsive prefixes.\n * @param {string[]} safelist - The safelist to add classes to.\n * @param {string | string[]} classes - The classes to add.\n * @param {string} [prefix=''] - Optional prefix to add to each class.\n * @param {string[]} breakpoints - List of valid breakpoints.\n */\nfunction addClassesToSafelist(\n  safelist: string[],\n  classes: string | string[],\n  prefix: string = \"\",\n  breakpoints: string[]\n) {\n  /**\n   * Adds a single class to the safelist, respecting existing responsive prefixes.\n   * @param {string} cls - The class to add.\n   */\n  const addClass = (cls: string) => {\n    // Check if the class already has a responsive prefix\n    const existingPrefix = cls.split(\":\")[0];\n    if (breakpoints.includes(existingPrefix)) {\n      // If the class already has a valid responsive prefix, add it as-is\n      addUnique(safelist, cls);\n    } else {\n      // If no existing prefix or invalid prefix, add the new prefix (if any)\n      const prefixedClass = prefix ? `${prefix}:${cls}` : cls;\n      addUnique(safelist, prefixedClass);\n    }\n  };\n\n  if (typeof classes === \"string\") {\n    // If classes is a string, split it into individual classes and add each\n    classes.split(/\\s+/).forEach(addClass);\n  } else if (Array.isArray(classes)) {\n    // If classes is an array, process each item\n    classes.forEach((cls) => {\n      if (typeof cls === \"string\") {\n        // If the array item is a string, split and add each class\n        cls.split(/\\s+/).forEach(addClass);\n      }\n      // Note: Non-string array items are ignored\n    });\n  }\n  // Note: If classes is neither a string nor an array, no action is taken\n}\n\n/**\n * Extracts file patterns from the Tailwind content configuration.\n * @param {ContentConfig} content - The content configuration.\n * @returns {string[]} An array of file patterns.\n */\nfunction getFilePatterns(content: ContentConfig): string[] {\n  if (typeof content === \"string\") {\n    return [content];\n  } else if (Array.isArray(content)) {\n    return content.flatMap((item) => getFilePatterns(item));\n  } else if (typeof content === \"object\" && content !== null) {\n    return getFilePatterns(content.files || []);\n  }\n  return [];\n}\n\n/**\n * Tailwind plugin for processing Recast components and generating a safelist.\n */\nexport default plugin(function ({ config }) {\n  const safelist: string[] = [];\n\n  // Read content configuration from Tailwind config\n  const contentConfig = config(\"content\") as ContentConfig;\n\n  const options = {\n    ignore: [\"**/node_modules/**\", \"**/build/**\", \"**/dist/**\"],\n  };\n\n  const filePatterns = getFilePatterns(contentConfig);\n\n  // Process each file matching the patterns\n  filePatterns.forEach((pattern) => {\n    const matchingFiles = glob.sync(pattern, options);\n\n    matchingFiles.forEach((file: string) => {\n      const content = fs.readFileSync(file, \"utf8\");\n      const recastComponents = parseRecastComponents(content);\n\n      // Generate safelist entries for each component\n      recastComponents.forEach((component) => {\n        const { base, variants, breakpoints } = component;\n\n        // Add base classes\n        addClassesToSafelist(safelist, base, \"\", breakpoints);\n\n        // Add variant classes\n        Object.values(variants).forEach((variantGroup) => {\n          Object.values(variantGroup).forEach((classes) => {\n            addClassesToSafelist(safelist, classes, \"\", breakpoints);\n          });\n        });\n\n        // Add responsive classes\n        breakpoints.forEach((breakpoint) => {\n          addClassesToSafelist(safelist, base, breakpoint, breakpoints);\n\n          Object.values(variants).forEach((variantGroup) => {\n            Object.values(variantGroup).forEach((classes) => {\n              addClassesToSafelist(safelist, classes, breakpoint, breakpoints);\n            });\n          });\n        });\n      });\n    });\n  });\n\n  // Add the safelist to the Tailwind config\n  const existingSafelist = config(\"safelist\") || [];\n  const combinedSafelist = existingSafelist.concat(safelist);\n  config().safelist = combinedSafelist.filter(\n    (item: string, index: number) => combinedSafelist.indexOf(item) === index\n  );\n});\n"],"mappings":"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","names":[]}